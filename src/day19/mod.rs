use crate::Solution;
use std::collections::HashMap;

const DIRECTIONS: [[(i8, u8); 3]; 24] = [
    [(1, 0), (1, 1), (1, 2)],
    [(1, 1), (-1, 0), (1, 2)],
    [(-1, 0), (-1, 1), (1, 2)],
    [(-1, 1), (1, 0), (1, 2)],
    [(1, 0), (-1, 1), (-1, 2)],
    [(1, 1), (1, 0), (-1, 2)],
    [(-1, 0), (1, 1), (-1, 2)],
    [(-1, 1), (-1, 0), (-1, 2)],
    [(1, 2), (1, 0), (1, 1)],
    [(1, 2), (1, 1), (-1, 0)],
    [(1, 2), (-1, 0), (-1, 1)],
    [(1, 2), (-1, 1), (1, 0)],
    [(-1, 2), (1, 0), (-1, 1)],
    [(-1, 2), (1, 1), (1, 0)],
    [(-1, 2), (-1, 0), (1, 1)],
    [(-1, 2), (-1, 1), (-1, 0)],
    [(1, 0), (-1, 2), (1, 1)],
    [(1, 1), (-1, 2), (-1, 0)],
    [(-1, 0), (-1, 2), (-1, 1)],
    [(-1, 1), (-1, 2), (1, 0)],
    [(1, 0), (1, 2), (-1, 1)],
    [(1, 1), (1, 2), (1, 0)],
    [(-1, 0), (1, 2), (1, 1)],
    [(-1, 1), (1, 2), (-1, 0)],
];

fn realign(b1: &mut Scanner, b2: &mut Scanner) -> bool {
    for [(xm, xi), (ym, yi), (zm, zi)] in DIRECTIONS {
        let mut possible_offsets = HashMap::new();
        for [x1, y1, z1] in &b1.beacons {
            for p2 in &b2.beacons {
                *possible_offsets
                    .entry([
                        x1 - p2[usize::from(xi)] * i16::from(xm),
                        y1 - p2[usize::from(yi)] * i16::from(ym),
                        z1 - p2[usize::from(zi)] * i16::from(zm),
                    ])
                    .or_insert(0) += 1;
            }
        }
        if let Some(([xp, yp, zp], _)) = possible_offsets.iter().find(|(_, &v)| v >= 12) {
            let fields: [fn(&mut Scanner) -> &mut _; 2] =
                [|b| &mut b.beacons, |b| &mut b.owned_scanners];
            for f in fields {
                f(b1).extend(f(b2).iter().map(|p2| {
                    [
                        xp + p2[usize::from(xi)] * i16::from(xm),
                        yp + p2[usize::from(yi)] * i16::from(ym),
                        zp + p2[usize::from(zi)] * i16::from(zm),
                    ]
                }));
            }
            b1.beacons.sort_unstable();
            b1.beacons.dedup();
            b2.beacons.clear();
            b2.should_scan = false;
            return true;
        }
    }
    b1.should_scan = false;
    false
}

struct Scanner {
    beacons: Vec<[i16; 3]>,
    owned_scanners: Vec<[i16; 3]>,
    should_scan: bool,
}

impl From<Vec<[i16; 3]>> for Scanner {
    fn from(beacons: Vec<[i16; 3]>) -> Scanner {
        Scanner {
            beacons,
            owned_scanners: vec![[0; 3]],
            should_scan: true,
        }
    }
}

fn parse_scanners(input: &str) -> Vec<Scanner> {
    let mut lines = input.lines();
    let mut scanners = Vec::new();
    while lines.next().is_some() {
        let beacons: Vec<_> = (&mut lines)
            .take_while(|line| !line.is_empty())
            .map(|line| {
                let (a, rest) = line.split_once(',').unwrap();
                let (b, c) = rest.split_once(',').unwrap();
                [a.parse().unwrap(), b.parse().unwrap(), c.parse().unwrap()]
            })
            .collect();
        scanners.push(beacons.into());
    }
    scanners
}

fn get_disjoint<T>(arr: &mut [T], a: usize, b: usize) -> (&mut T, &mut T) {
    if a > b {
        let (a1, a2) = arr.split_at_mut(a);
        (&mut a2[0], &mut a1[b])
    } else {
        let (a1, a2) = arr.split_at_mut(b);
        (&mut a1[a], &mut a2[0])
    }
}

fn get_map(input: &str) -> Scanner {
    let mut scanners = parse_scanners(input);
    loop {
        let mut found_anything = false;
        for i in 0..scanners.len() {
            if !scanners[i].should_scan {
                continue;
            }
            for j in 0..scanners.len() {
                if i == j {
                    continue;
                }
                let (a, b) = get_disjoint(&mut scanners, i, j);
                if realign(a, b) {
                    found_anything = true;
                }
            }
        }
        scanners.retain(|scanner| !scanner.beacons.is_empty());
        if !found_anything {
            break;
        }
    }
    assert_eq!(scanners.len(), 1);
    scanners.pop().unwrap()
}

pub(super) const DAY19: Solution = Solution {
    part1: |input| Ok(get_map(input).beacons.len().to_string()),
    part2: |input| {
        let scanners = get_map(input).owned_scanners;
        let mut max_distance = 0;
        for p1 in &scanners {
            for p2 in &scanners {
                max_distance = p1
                    .iter()
                    .zip(p2)
                    .map(|(a, b)| (a - b).abs())
                    .sum::<i16>()
                    .max(max_distance);
            }
        }
        Ok(max_distance.to_string())
    },
};

#[cfg(test)]
mod test {
    use super::{realign, Scanner};
    use crate::test;

    #[test]
    fn realign_test() {
        let mut s1 = Scanner::from(vec![
            [404, -588, -901],
            [528, -643, 409],
            [-838, 591, 734],
            [390, -675, -793],
            [-537, -823, -458],
            [-485, -357, 347],
            [-345, -311, 381],
            [-661, -816, -575],
            [-876, 649, 763],
            [-618, -824, -621],
            [553, 345, -567],
            [474, 580, 667],
            [-447, -329, 318],
            [-584, 868, -557],
            [544, -627, -890],
            [564, 392, -477],
            [455, 729, 728],
            [-892, 524, 684],
            [-689, 845, -530],
            [423, -701, 434],
            [7, -33, -71],
            [630, 319, -379],
            [443, 580, 662],
            [-789, 900, -551],
            [459, -707, 401],
        ]);
        let mut s2 = Scanner::from(vec![
            [686, 422, 578],
            [605, 423, 415],
            [515, 917, -361],
            [-336, 658, 858],
            [95, 138, 22],
            [-476, 619, 847],
            [-340, -569, -846],
            [567, -361, 727],
            [-460, 603, -452],
            [669, -402, 600],
            [729, 430, 532],
            [-500, -761, 534],
            [-322, 571, 750],
            [-466, -666, -811],
            [-429, -592, 574],
            [-355, 545, -477],
            [703, -491, -529],
            [-328, -685, 520],
            [413, 935, -424],
            [-391, 539, -444],
            [586, -435, 557],
            [-364, -763, -893],
            [807, -499, -711],
            [755, -354, -619],
            [553, 889, -390],
        ]);
        assert!(realign(&mut s1, &mut s2));
        assert_eq!(
            s1.beacons,
            [
                [-892, 524, 684],
                [-876, 649, 763],
                [-838, 591, 734],
                [-789, 900, -551],
                [-739, -1745, 668],
                [-689, 845, -530],
                [-687, -1600, 576],
                [-661, -816, -575],
                [-635, -1737, 486],
                [-618, -824, -621],
                [-601, -1648, -643],
                [-584, 868, -557],
                [-537, -823, -458],
                [-518, -1681, -600],
                [-499, -1607, -770],
                [-485, -357, 347],
                [-447, -329, 318],
                [-345, -311, 381],
                [-27, -1108, -65],
                [7, -33, -71],
                [390, -675, -793],
                [396, -1931, -563],
                [404, -588, -901],
                [408, -1815, 803],
                [423, -701, 434],
                [432, -2009, 850],
                [443, 580, 662],
                [455, 729, 728],
                [459, -707, 401],
                [474, 580, 667],
                [497, -1838, -617],
                [528, -643, 409],
                [534, -1912, 768],
                [544, -627, -890],
                [553, 345, -567],
                [564, 392, -477],
                [568, -2007, -577],
                [630, 319, -379],
            ],
        );
        assert_eq!(s2.beacons, Vec::<[i16; 3]>::new());
    }
    test!(
        DAY19.part1,
        example: lines!(
            "--- scanner 0 ---"
            "404,-588,-901"
            "528,-643,409"
            "-838,591,734"
            "390,-675,-793"
            "-537,-823,-458"
            "-485,-357,347"
            "-345,-311,381"
            "-661,-816,-575"
            "-876,649,763"
            "-618,-824,-621"
            "553,345,-567"
            "474,580,667"
            "-447,-329,318"
            "-584,868,-557"
            "544,-627,-890"
            "564,392,-477"
            "455,729,728"
            "-892,524,684"
            "-689,845,-530"
            "423,-701,434"
            "7,-33,-71"
            "630,319,-379"
            "443,580,662"
            "-789,900,-551"
            "459,-707,401"
            ""
            "--- scanner 1 ---"
            "686,422,578"
            "605,423,415"
            "515,917,-361"
            "-336,658,858"
            "95,138,22"
            "-476,619,847"
            "-340,-569,-846"
            "567,-361,727"
            "-460,603,-452"
            "669,-402,600"
            "729,430,532"
            "-500,-761,534"
            "-322,571,750"
            "-466,-666,-811"
            "-429,-592,574"
            "-355,545,-477"
            "703,-491,-529"
            "-328,-685,520"
            "413,935,-424"
            "-391,539,-444"
            "586,-435,557"
            "-364,-763,-893"
            "807,-499,-711"
            "755,-354,-619"
            "553,889,-390"
            ""
            "--- scanner 2 ---"
            "649,640,665"
            "682,-795,504"
            "-784,533,-524"
            "-644,584,-595"
            "-588,-843,648"
            "-30,6,44"
            "-674,560,763"
            "500,723,-460"
            "609,671,-379"
            "-555,-800,653"
            "-675,-892,-343"
            "697,-426,-610"
            "578,704,681"
            "493,664,-388"
            "-671,-858,530"
            "-667,343,800"
            "571,-461,-707"
            "-138,-166,112"
            "-889,563,-600"
            "646,-828,498"
            "640,759,510"
            "-630,509,768"
            "-681,-892,-333"
            "673,-379,-804"
            "-742,-814,-386"
            "577,-820,562"
            ""
            "--- scanner 3 ---"
            "-589,542,597"
            "605,-692,669"
            "-500,565,-823"
            "-660,373,557"
            "-458,-679,-417"
            "-488,449,543"
            "-626,468,-788"
            "338,-750,-386"
            "528,-832,-391"
            "562,-778,733"
            "-938,-730,414"
            "543,643,-506"
            "-524,371,-870"
            "407,773,750"
            "-104,29,83"
            "378,-903,-323"
            "-778,-728,485"
            "426,699,580"
            "-438,-605,-362"
            "-469,-447,-387"
            "509,732,623"
            "647,635,-688"
            "-868,-804,481"
            "614,-800,639"
            "595,780,-596"
            ""
            "--- scanner 4 ---"
            "727,592,562"
            "-293,-554,779"
            "441,611,-461"
            "-714,465,-776"
            "-743,427,-804"
            "-660,-479,-426"
            "832,-632,460"
            "927,-485,-438"
            "408,393,-506"
            "466,436,-512"
            "110,16,151"
            "-258,-428,682"
            "-393,719,612"
            "-211,-452,876"
            "808,-476,-593"
            "-575,615,604"
            "-485,667,467"
            "-680,325,-822"
            "-627,-443,-432"
            "872,-547,-609"
            "833,512,582"
            "807,604,487"
            "839,-516,451"
            "891,-625,532"
            "-652,-548,-490"
            "30,-46,-14"
        ) => 79,
        input: 338,
    );
    test!(
        DAY19.part2,
        example: lines!(
            "--- scanner 0 ---"
            "404,-588,-901"
            "528,-643,409"
            "-838,591,734"
            "390,-675,-793"
            "-537,-823,-458"
            "-485,-357,347"
            "-345,-311,381"
            "-661,-816,-575"
            "-876,649,763"
            "-618,-824,-621"
            "553,345,-567"
            "474,580,667"
            "-447,-329,318"
            "-584,868,-557"
            "544,-627,-890"
            "564,392,-477"
            "455,729,728"
            "-892,524,684"
            "-689,845,-530"
            "423,-701,434"
            "7,-33,-71"
            "630,319,-379"
            "443,580,662"
            "-789,900,-551"
            "459,-707,401"
            ""
            "--- scanner 1 ---"
            "686,422,578"
            "605,423,415"
            "515,917,-361"
            "-336,658,858"
            "95,138,22"
            "-476,619,847"
            "-340,-569,-846"
            "567,-361,727"
            "-460,603,-452"
            "669,-402,600"
            "729,430,532"
            "-500,-761,534"
            "-322,571,750"
            "-466,-666,-811"
            "-429,-592,574"
            "-355,545,-477"
            "703,-491,-529"
            "-328,-685,520"
            "413,935,-424"
            "-391,539,-444"
            "586,-435,557"
            "-364,-763,-893"
            "807,-499,-711"
            "755,-354,-619"
            "553,889,-390"
            ""
            "--- scanner 2 ---"
            "649,640,665"
            "682,-795,504"
            "-784,533,-524"
            "-644,584,-595"
            "-588,-843,648"
            "-30,6,44"
            "-674,560,763"
            "500,723,-460"
            "609,671,-379"
            "-555,-800,653"
            "-675,-892,-343"
            "697,-426,-610"
            "578,704,681"
            "493,664,-388"
            "-671,-858,530"
            "-667,343,800"
            "571,-461,-707"
            "-138,-166,112"
            "-889,563,-600"
            "646,-828,498"
            "640,759,510"
            "-630,509,768"
            "-681,-892,-333"
            "673,-379,-804"
            "-742,-814,-386"
            "577,-820,562"
            ""
            "--- scanner 3 ---"
            "-589,542,597"
            "605,-692,669"
            "-500,565,-823"
            "-660,373,557"
            "-458,-679,-417"
            "-488,449,543"
            "-626,468,-788"
            "338,-750,-386"
            "528,-832,-391"
            "562,-778,733"
            "-938,-730,414"
            "543,643,-506"
            "-524,371,-870"
            "407,773,750"
            "-104,29,83"
            "378,-903,-323"
            "-778,-728,485"
            "426,699,580"
            "-438,-605,-362"
            "-469,-447,-387"
            "509,732,623"
            "647,635,-688"
            "-868,-804,481"
            "614,-800,639"
            "595,780,-596"
            ""
            "--- scanner 4 ---"
            "727,592,562"
            "-293,-554,779"
            "441,611,-461"
            "-714,465,-776"
            "-743,427,-804"
            "-660,-479,-426"
            "832,-632,460"
            "927,-485,-438"
            "408,393,-506"
            "466,436,-512"
            "110,16,151"
            "-258,-428,682"
            "-393,719,612"
            "-211,-452,876"
            "808,-476,-593"
            "-575,615,604"
            "-485,667,467"
            "-680,325,-822"
            "-627,-443,-432"
            "872,-547,-609"
            "833,512,582"
            "807,604,487"
            "839,-516,451"
            "891,-625,532"
            "-652,-548,-490"
            "30,-46,-14"
        ) => 3621,
        input: 9862,
    );
}
